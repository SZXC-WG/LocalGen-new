cmake_minimum_required(VERSION 3.5)

project(LocalGen-new VERSION 0.1 LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(QT NAMES Qt6 REQUIRED COMPONENTS Widgets)
find_package(Qt6 REQUIRED COMPONENTS Widgets Svg)

set(PROJECT_SOURCES
        src/main.cpp
        src/mainWindow/mainWindow.cpp
        src/mainWindow/mainWindow.h
        src/mainWindow/mainWindow.ui
        src/localGameDialog/localGameDialog.cpp
        src/localGameDialog/localGameDialog.h
        src/localGameDialog/localGameDialog.ui
        src/mapWidget/mapWidget.cpp
        src/mapWidget/mapWidget.h
        src/localGameWindow/localGameWindow.cpp
        src/localGameWindow/localGameWindow.h
        src/GameEngine/board.cpp
        src/GameEngine/board.h
        src/GameEngine/game.cpp
        src/GameEngine/game.h
        src/GameEngine/move.cpp
        src/GameEngine/move.h
        src/GameEngine/player.cpp
        src/GameEngine/player.h
        src/GameEngine/tile.cpp
        src/GameEngine/tile.h
        src/utils/coord.cpp
        src/utils/coord.h
        res/res.qrc
)

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(LocalGen-new
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES}
    )
# Define target properties for Android with Qt 6 as:
#    set_property(TARGET LocalGen-new APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation
else()
    if(ANDROID)
        add_library(LocalGen-new SHARED
            ${PROJECT_SOURCES}
        )
# Define properties for Android with Qt 5 after find_package() calls as:
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        add_executable(LocalGen-new
            ${PROJECT_SOURCES}
        )
    endif()
endif()

target_include_directories(LocalGen-new PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_link_libraries(LocalGen-new PRIVATE Qt6::Widgets Qt6::Svg)

# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
# If you are developing for iOS or macOS you should consider setting an
# explicit, fixed bundle identifier manually though.
if(${QT_VERSION} VERSION_LESS 6.1.0)
  set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.LocalGen-new)
endif()
set_target_properties(LocalGen-new PROPERTIES
    ${BUNDLE_ID_OPTION}
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

include(GNUInstallDirs)
install(TARGETS LocalGen-new
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(LocalGen-new)
endif()
